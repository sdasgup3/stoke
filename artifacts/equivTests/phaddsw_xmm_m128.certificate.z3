



(declare-const Imm8 (_ BitVec 8))
(declare-const TMP_BV_8 (_ BitVec 8))
(declare-const TMP_BV_16 (_ BitVec 16))
(declare-const TMP_BV_32 (_ BitVec 32))
(declare-const TMP_BV_64 (_ BitVec 64))
(declare-const TMP_BV_128 (_ BitVec 128))
(declare-const TMP_BV_256 (_ BitVec 256))
(declare-const TMP_BOOL Bool)
(declare-const rbx (_ BitVec 64))
(declare-const rax (_ BitVec 64))
(declare-const rcx (_ BitVec 64))
(declare-const rdx (_ BitVec 64))
(declare-const rsp (_ BitVec 64))
(declare-const rip (_ BitVec 64))
(declare-const ymm0 (_ BitVec 256))
(declare-const ymm1 (_ BitVec 256))
(declare-const ymm2 (_ BitVec 256))
(declare-const ymm3 (_ BitVec 256))
(declare-const ymm4 (_ BitVec 256))
(declare-const ymm5 (_ BitVec 256))
(declare-const ymm6 (_ BitVec 256))
(declare-const ymm7 (_ BitVec 256))
(declare-const ymm8 (_ BitVec 256))
(declare-const ymm9 (_ BitVec 256))
(declare-const ymm10 (_ BitVec 256))
(declare-const ymm11 (_ BitVec 256))
(declare-const ymm12 (_ BitVec 256))
(declare-const ymm13 (_ BitVec 256))
(declare-const ymm14 (_ BitVec 256))
(declare-const ymm15 (_ BitVec 256))
(declare-const zf Bool)
(declare-const sf Bool)
(declare-const cf Bool)
(declare-const pf Bool)
(declare-const af Bool)
(declare-const of Bool)

; Uninterpreted binary function declaration
(declare-fun comisd ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 2))
(declare-fun comiss ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 2))
(declare-fun    cvt_single_to_fp16_rm   ((_ BitVec 32) (_ BitVec 8)) (_ BitVec 16) )
(declare-fun    cvt_single_to_int32_rm  ((_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) )
(declare-fun    cvt_double_to_int64_rm  ((_ BitVec 64) (_ BitVec 8)) (_ BitVec 64) )

(declare-fun add_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun add_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun sub_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun sub_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun mul_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun mul_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun maxcmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun maxcmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))
(declare-fun mincmp_double ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 1))
(declare-fun mincmp_single ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 1))

(declare-fun idiv_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun idiv_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun idiv_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun idiv_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun idiv_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_quotient_int8   ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_remainder_int8  ((_ BitVec 16) (_ BitVec 8)) (_ BitVec 8))
(declare-fun div_quotient_int16  ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_remainder_int16 ((_ BitVec 32) (_ BitVec 16)) (_ BitVec 16))
(declare-fun div_quotient_int32  ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_remainder_int32 ((_ BitVec 64) (_ BitVec 32)) (_ BitVec 32))
(declare-fun div_quotient_int64  ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))
(declare-fun div_remainder_int64 ((_ BitVec 128) (_ BitVec 64)) (_ BitVec 64))

; Uninterpreted unary function declaration
(declare-fun    cvt_half_to_single      ((_ BitVec 16)) (_ BitVec 32) )
(declare-fun    cvt_double_to_int64_truncate     ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun    cvt_single_to_int64_truncate     ((_ BitVec 32)) (_ BitVec 64) )

(declare-fun approx_reciprocal_double       ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_single       ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun sqrt_double                    ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun sqrt_single                    ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun approx_reciprocal_sqrt_double  ((_ BitVec 64)) (_ BitVec 64) )
(declare-fun approx_reciprocal_sqrt_single  ((_ BitVec 32)) (_ BitVec 32) )

(declare-fun cvt_single_to_double           ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_single           ((_ BitVec 64)) (_ BitVec 32) )

(declare-fun cvt_single_to_int32            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int32_truncate   ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_single_to_int64            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_double_to_int32            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int32_truncate   ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_double_to_int64            ((_ BitVec 64)) (_ BitVec 64) )

(declare-fun cvt_int32_to_single            ((_ BitVec 32)) (_ BitVec 32) )
(declare-fun cvt_int32_to_double            ((_ BitVec 32)) (_ BitVec 64) )
(declare-fun cvt_int64_to_single            ((_ BitVec 64)) (_ BitVec 32) )
(declare-fun cvt_int64_to_double            ((_ BitVec 64)) (_ BitVec 64) )

; Uninterpreted ternary function declaration
(declare-fun cmp_double_pred ((_ BitVec 64) (_ BitVec 64) (_ BitVec 8)) (_ BitVec 1))
(declare-fun cmp_single_pred ((_ BitVec 32) (_ BitVec 32) (_ BitVec 8)) (_ BitVec 1))

(declare-fun vfmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmadd231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd231_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmadd213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmadd213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub231_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfmsub213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfmsub213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmadd132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmsub132_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmsub132_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun vfnmadd213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd231_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmsub213_double ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun vfnmadd213_single ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))


( push )
( echo "phaddsw_xmm_m128::ymm1")
(assert (not (=
(let ((a!1 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))
#x00007fff))
(a!2 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))
#xffff8000))
(a!3 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))))
(a!4 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))
#x00007fff))
(a!5 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))
#xffff8000))
(a!6 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))))
(a!7 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))
#x00007fff))
(a!8 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))
#xffff8000))
(a!9 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))))
(a!10 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))
#x00007fff))
(a!11 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))
#xffff8000))
(a!12 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))))
(a!13 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))
#x00007fff))
(a!14 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))
#xffff8000))
(a!15 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))))
(a!16 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))
#x00007fff))
(a!17 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))
#xffff8000))
(a!18 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))))
(a!19 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))
#x00007fff))
(a!20 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))
#xffff8000))
(a!21 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))))
(a!22 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1)))
#x00007fff))
(a!23 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1)))
#xffff8000))
(a!24 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1))))))
(let ((a!25 (concat (ite a!16 #x7fff (ite a!17 #x8000 a!18))
(concat (ite a!19 #x7fff (ite a!20 #x8000 a!21))
(ite a!22 #x7fff (ite a!23 #x8000 a!24))))))
(let ((a!26 (concat (ite a!10 #x7fff (ite a!11 #x8000 a!12))
(concat (ite a!13 #x7fff (ite a!14 #x8000 a!15)) a!25))))
(let ((a!27 (concat (ite a!4 #x7fff (ite a!5 #x8000 a!6))
(concat (ite a!7 #x7fff (ite a!8 #x8000 a!9)) a!26))))
(concat ((_ extract 255 128) ymm1)
(concat (ite a!1 #x7fff (ite a!2 #x8000 a!3)) a!27))))))

(let ((a!1 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))
#x00007fff))
(a!2 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))
#xffff8000))
(a!3 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 127 112) TMP_BV_128))
((_ sign_extend 16) ((_ extract 111 96) TMP_BV_128)))))
(a!4 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))
#x00007fff))
(a!5 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))
#xffff8000))
(a!6 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 95 80) TMP_BV_128))
((_ sign_extend 16) ((_ extract 79 64) TMP_BV_128)))))
(a!7 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))
#x00007fff))
(a!8 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))
#xffff8000))
(a!9 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 63 48) TMP_BV_128))
((_ sign_extend 16) ((_ extract 47 32) TMP_BV_128)))))
(a!10 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))
#x00007fff))
(a!11 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))
#xffff8000))
(a!12 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 31 16) TMP_BV_128))
((_ sign_extend 16) ((_ extract 15 0) TMP_BV_128)))))
(a!13 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))
#x00007fff))
(a!14 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))
#xffff8000))
(a!15 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 127 112) ymm1))
((_ sign_extend 16) ((_ extract 111 96) ymm1)))))
(a!16 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))
#x00007fff))
(a!17 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))
#xffff8000))
(a!18 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 95 80) ymm1))
((_ sign_extend 16) ((_ extract 79 64) ymm1)))))
(a!19 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))
#x00007fff))
(a!20 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))
#xffff8000))
(a!21 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 63 48) ymm1))
((_ sign_extend 16) ((_ extract 47 32) ymm1)))))
(a!22 (bvsgt (bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1)))
#x00007fff))
(a!23 (bvslt (bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1)))
#xffff8000))
(a!24 ((_ extract 15 0)
(bvadd ((_ sign_extend 16) ((_ extract 15 0) ymm1))
((_ sign_extend 16) ((_ extract 31 16) ymm1))))))
(let ((a!25 (concat (ite a!16 #x7fff (ite a!17 #x8000 a!18))
(concat (ite a!19 #x7fff (ite a!20 #x8000 a!21))
(ite a!22 #x7fff (ite a!23 #x8000 a!24))))))
(let ((a!26 (concat (ite a!10 #x7fff (ite a!11 #x8000 a!12))
(concat (ite a!13 #x7fff (ite a!14 #x8000 a!15)) a!25))))
(let ((a!27 (concat (ite a!4 #x7fff (ite a!5 #x8000 a!6))
(concat (ite a!7 #x7fff (ite a!8 #x8000 a!9)) a!26))))
(concat ((_ extract 255 128) ymm1)
(concat (ite a!1 #x7fff (ite a!2 #x8000 a!3)) a!27))))))
)))
(check-sat)
( pop )



