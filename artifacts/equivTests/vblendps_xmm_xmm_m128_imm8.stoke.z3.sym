code: vblendps $0x0, (%rbx), %xmm2, %xmm1

  maybe read:      { %rbx %xmm2 }
  must read:       { %rbx %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Formula:

%ymm1  : (let ((a!1 (concat (ite (= ((_ extract 1 1) Imm8) #b0)
                        ((_ extract 63 32) %ymm2)
                        ((_ extract 63 32) TMP_BV_128_0))
                   (ite (= ((_ extract 0 0) Imm8) #b0)
                        ((_ extract 31 0) %ymm2)
                        ((_ extract 31 0) TMP_BV_128_0)))))
(let ((a!2 (concat (ite (= ((_ extract 2 2) Imm8) #b0)
                        ((_ extract 95 64) %ymm2)
                        ((_ extract 95 64) TMP_BV_128_0))
                   a!1)))
(let ((a!3 (concat (ite (= ((_ extract 3 3) Imm8) #b0)
                        ((_ extract 127 96) %ymm2)
                        ((_ extract 127 96) TMP_BV_128_0))
                   a!2)))
  (concat #x00000000000000000000000000000000 a!3))))


Information about memory reads:
  Value TMP_BV_128_0
 (16 bytes)
    was read at address %rbx
.

sigfpe  : sigfpe

sigbus  : sigbus

sigsegv : (or sigsegv (and (not sigfpe) (not sigbus) false))

